// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Auth is an autogenerated mock type for the Auth type
type Auth struct {
	mock.Mock
}

type Auth_Expecter struct {
	mock *mock.Mock
}

func (_m *Auth) EXPECT() *Auth_Expecter {
	return &Auth_Expecter{mock: &_m.Mock}
}

// GenerateAccessToken provides a mock function with given fields: refreshToken
func (_m *Auth) GenerateAccessToken(refreshToken string) (string, error) {
	ret := _m.Called(refreshToken)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(refreshToken)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(refreshToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Auth_GenerateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAccessToken'
type Auth_GenerateAccessToken_Call struct {
	*mock.Call
}

// GenerateAccessToken is a helper method to define mock.On call
//   - refreshToken string
func (_e *Auth_Expecter) GenerateAccessToken(refreshToken interface{}) *Auth_GenerateAccessToken_Call {
	return &Auth_GenerateAccessToken_Call{Call: _e.mock.On("GenerateAccessToken", refreshToken)}
}

func (_c *Auth_GenerateAccessToken_Call) Run(run func(refreshToken string)) *Auth_GenerateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Auth_GenerateAccessToken_Call) Return(_a0 string, _a1 error) *Auth_GenerateAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Auth_GenerateAccessToken_Call) RunAndReturn(run func(string) (string, error)) *Auth_GenerateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateRefreshToken provides a mock function with given fields: userId
func (_m *Auth) GenerateRefreshToken(userId string) (string, error) {
	ret := _m.Called(userId)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Auth_GenerateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRefreshToken'
type Auth_GenerateRefreshToken_Call struct {
	*mock.Call
}

// GenerateRefreshToken is a helper method to define mock.On call
//   - userId string
func (_e *Auth_Expecter) GenerateRefreshToken(userId interface{}) *Auth_GenerateRefreshToken_Call {
	return &Auth_GenerateRefreshToken_Call{Call: _e.mock.On("GenerateRefreshToken", userId)}
}

func (_c *Auth_GenerateRefreshToken_Call) Run(run func(userId string)) *Auth_GenerateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Auth_GenerateRefreshToken_Call) Return(_a0 string, _a1 error) *Auth_GenerateRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Auth_GenerateRefreshToken_Call) RunAndReturn(run func(string) (string, error)) *Auth_GenerateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAuth interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuth creates a new instance of Auth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuth(t mockConstructorTestingTNewAuth) *Auth {
	mock := &Auth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

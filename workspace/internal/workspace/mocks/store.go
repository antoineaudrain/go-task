// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "go-task/core/pkg/models"

	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

type Store_Expecter struct {
	mock *mock.Mock
}

func (_m *Store) EXPECT() *Store_Expecter {
	return &Store_Expecter{mock: &_m.Mock}
}

// CreateWorkspace provides a mock function with given fields: _a0
func (_m *Store) CreateWorkspace(_a0 *models.Workspace) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Workspace) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_CreateWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkspace'
type Store_CreateWorkspace_Call struct {
	*mock.Call
}

// CreateWorkspace is a helper method to define mock.On call
//   - _a0 *models.Workspace
func (_e *Store_Expecter) CreateWorkspace(_a0 interface{}) *Store_CreateWorkspace_Call {
	return &Store_CreateWorkspace_Call{Call: _e.mock.On("CreateWorkspace", _a0)}
}

func (_c *Store_CreateWorkspace_Call) Run(run func(_a0 *models.Workspace)) *Store_CreateWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Workspace))
	})
	return _c
}

func (_c *Store_CreateWorkspace_Call) Return(_a0 error) *Store_CreateWorkspace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_CreateWorkspace_Call) RunAndReturn(run func(*models.Workspace) error) *Store_CreateWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWorkspaceUser provides a mock function with given fields: workspaceUser
func (_m *Store) CreateWorkspaceUser(workspaceUser *models.WorkspaceUser) error {
	ret := _m.Called(workspaceUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.WorkspaceUser) error); ok {
		r0 = rf(workspaceUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_CreateWorkspaceUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkspaceUser'
type Store_CreateWorkspaceUser_Call struct {
	*mock.Call
}

// CreateWorkspaceUser is a helper method to define mock.On call
//   - workspaceUser *models.WorkspaceUser
func (_e *Store_Expecter) CreateWorkspaceUser(workspaceUser interface{}) *Store_CreateWorkspaceUser_Call {
	return &Store_CreateWorkspaceUser_Call{Call: _e.mock.On("CreateWorkspaceUser", workspaceUser)}
}

func (_c *Store_CreateWorkspaceUser_Call) Run(run func(workspaceUser *models.WorkspaceUser)) *Store_CreateWorkspaceUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.WorkspaceUser))
	})
	return _c
}

func (_c *Store_CreateWorkspaceUser_Call) Return(_a0 error) *Store_CreateWorkspaceUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_CreateWorkspaceUser_Call) RunAndReturn(run func(*models.WorkspaceUser) error) *Store_CreateWorkspaceUser_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStore(t mockConstructorTestingTNewStore) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "go-task/core/pkg/models"

	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v4"

	uuid "github.com/google/uuid"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

type Store_Expecter struct {
	mock *mock.Mock
}

func (_m *Store) EXPECT() *Store_Expecter {
	return &Store_Expecter{mock: &_m.Mock}
}

// BeginTx provides a mock function with given fields: ctx
func (_m *Store) BeginTx(ctx context.Context) (pgx.Tx, error) {
	ret := _m.Called(ctx)

	var r0 pgx.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (pgx.Tx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) pgx.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type Store_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Store_Expecter) BeginTx(ctx interface{}) *Store_BeginTx_Call {
	return &Store_BeginTx_Call{Call: _e.mock.On("BeginTx", ctx)}
}

func (_c *Store_BeginTx_Call) Run(run func(ctx context.Context)) *Store_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Store_BeginTx_Call) Return(_a0 pgx.Tx, _a1 error) *Store_BeginTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_BeginTx_Call) RunAndReturn(run func(context.Context) (pgx.Tx, error)) *Store_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWorkspace provides a mock function with given fields: ctx, tx, name
func (_m *Store) CreateWorkspace(ctx context.Context, tx pgx.Tx, name string) (*models.Workspace, error) {
	ret := _m.Called(ctx, tx, name)

	var r0 *models.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, string) (*models.Workspace, error)); ok {
		return rf(ctx, tx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, string) *models.Workspace); ok {
		r0 = rf(ctx, tx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgx.Tx, string) error); ok {
		r1 = rf(ctx, tx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkspace'
type Store_CreateWorkspace_Call struct {
	*mock.Call
}

// CreateWorkspace is a helper method to define mock.On call
//   - ctx context.Context
//   - tx pgx.Tx
//   - name string
func (_e *Store_Expecter) CreateWorkspace(ctx interface{}, tx interface{}, name interface{}) *Store_CreateWorkspace_Call {
	return &Store_CreateWorkspace_Call{Call: _e.mock.On("CreateWorkspace", ctx, tx, name)}
}

func (_c *Store_CreateWorkspace_Call) Run(run func(ctx context.Context, tx pgx.Tx, name string)) *Store_CreateWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.Tx), args[2].(string))
	})
	return _c
}

func (_c *Store_CreateWorkspace_Call) Return(_a0 *models.Workspace, _a1 error) *Store_CreateWorkspace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateWorkspace_Call) RunAndReturn(run func(context.Context, pgx.Tx, string) (*models.Workspace, error)) *Store_CreateWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWorkspaceUser provides a mock function with given fields: ctx, tx, workspaceID
func (_m *Store) CreateWorkspaceUser(ctx context.Context, tx pgx.Tx, workspaceID uuid.UUID) (*models.WorkspaceUser, error) {
	ret := _m.Called(ctx, tx, workspaceID)

	var r0 *models.WorkspaceUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, uuid.UUID) (*models.WorkspaceUser, error)); ok {
		return rf(ctx, tx, workspaceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, uuid.UUID) *models.WorkspaceUser); ok {
		r0 = rf(ctx, tx, workspaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WorkspaceUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgx.Tx, uuid.UUID) error); ok {
		r1 = rf(ctx, tx, workspaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateWorkspaceUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkspaceUser'
type Store_CreateWorkspaceUser_Call struct {
	*mock.Call
}

// CreateWorkspaceUser is a helper method to define mock.On call
//   - ctx context.Context
//   - tx pgx.Tx
//   - workspaceID uuid.UUID
func (_e *Store_Expecter) CreateWorkspaceUser(ctx interface{}, tx interface{}, workspaceID interface{}) *Store_CreateWorkspaceUser_Call {
	return &Store_CreateWorkspaceUser_Call{Call: _e.mock.On("CreateWorkspaceUser", ctx, tx, workspaceID)}
}

func (_c *Store_CreateWorkspaceUser_Call) Run(run func(ctx context.Context, tx pgx.Tx, workspaceID uuid.UUID)) *Store_CreateWorkspaceUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.Tx), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *Store_CreateWorkspaceUser_Call) Return(_a0 *models.WorkspaceUser, _a1 error) *Store_CreateWorkspaceUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateWorkspaceUser_Call) RunAndReturn(run func(context.Context, pgx.Tx, uuid.UUID) (*models.WorkspaceUser, error)) *Store_CreateWorkspaceUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkspace provides a mock function with given fields: ctx, tx, workspaceID, userID
func (_m *Store) DeleteWorkspace(ctx context.Context, tx pgx.Tx, workspaceID uuid.UUID, userID uuid.UUID) (*models.Workspace, error) {
	ret := _m.Called(ctx, tx, workspaceID, userID)

	var r0 *models.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, uuid.UUID, uuid.UUID) (*models.Workspace, error)); ok {
		return rf(ctx, tx, workspaceID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, uuid.UUID, uuid.UUID) *models.Workspace); ok {
		r0 = rf(ctx, tx, workspaceID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgx.Tx, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, tx, workspaceID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_DeleteWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkspace'
type Store_DeleteWorkspace_Call struct {
	*mock.Call
}

// DeleteWorkspace is a helper method to define mock.On call
//   - ctx context.Context
//   - tx pgx.Tx
//   - workspaceID uuid.UUID
//   - userID uuid.UUID
func (_e *Store_Expecter) DeleteWorkspace(ctx interface{}, tx interface{}, workspaceID interface{}, userID interface{}) *Store_DeleteWorkspace_Call {
	return &Store_DeleteWorkspace_Call{Call: _e.mock.On("DeleteWorkspace", ctx, tx, workspaceID, userID)}
}

func (_c *Store_DeleteWorkspace_Call) Run(run func(ctx context.Context, tx pgx.Tx, workspaceID uuid.UUID, userID uuid.UUID)) *Store_DeleteWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.Tx), args[2].(uuid.UUID), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *Store_DeleteWorkspace_Call) Return(_a0 *models.Workspace, _a1 error) *Store_DeleteWorkspace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_DeleteWorkspace_Call) RunAndReturn(run func(context.Context, pgx.Tx, uuid.UUID, uuid.UUID) (*models.Workspace, error)) *Store_DeleteWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspace provides a mock function with given fields: ctx, workspaceID
func (_m *Store) GetWorkspace(ctx context.Context, workspaceID uuid.UUID) (*models.Workspace, error) {
	ret := _m.Called(ctx, workspaceID)

	var r0 *models.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Workspace, error)); ok {
		return rf(ctx, workspaceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Workspace); ok {
		r0 = rf(ctx, workspaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, workspaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspace'
type Store_GetWorkspace_Call struct {
	*mock.Call
}

// GetWorkspace is a helper method to define mock.On call
//   - ctx context.Context
//   - workspaceID uuid.UUID
func (_e *Store_Expecter) GetWorkspace(ctx interface{}, workspaceID interface{}) *Store_GetWorkspace_Call {
	return &Store_GetWorkspace_Call{Call: _e.mock.On("GetWorkspace", ctx, workspaceID)}
}

func (_c *Store_GetWorkspace_Call) Run(run func(ctx context.Context, workspaceID uuid.UUID)) *Store_GetWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Store_GetWorkspace_Call) Return(_a0 *models.Workspace, _a1 error) *Store_GetWorkspace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetWorkspace_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.Workspace, error)) *Store_GetWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkspaceUser provides a mock function with given fields: ctx, workspaceID, userID
func (_m *Store) GetWorkspaceUser(ctx context.Context, workspaceID uuid.UUID, userID uuid.UUID) (*models.WorkspaceUser, error) {
	ret := _m.Called(ctx, workspaceID, userID)

	var r0 *models.WorkspaceUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*models.WorkspaceUser, error)); ok {
		return rf(ctx, workspaceID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *models.WorkspaceUser); ok {
		r0 = rf(ctx, workspaceID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WorkspaceUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, workspaceID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetWorkspaceUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkspaceUser'
type Store_GetWorkspaceUser_Call struct {
	*mock.Call
}

// GetWorkspaceUser is a helper method to define mock.On call
//   - ctx context.Context
//   - workspaceID uuid.UUID
//   - userID uuid.UUID
func (_e *Store_Expecter) GetWorkspaceUser(ctx interface{}, workspaceID interface{}, userID interface{}) *Store_GetWorkspaceUser_Call {
	return &Store_GetWorkspaceUser_Call{Call: _e.mock.On("GetWorkspaceUser", ctx, workspaceID, userID)}
}

func (_c *Store_GetWorkspaceUser_Call) Run(run func(ctx context.Context, workspaceID uuid.UUID, userID uuid.UUID)) *Store_GetWorkspaceUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *Store_GetWorkspaceUser_Call) Return(_a0 *models.WorkspaceUser, _a1 error) *Store_GetWorkspaceUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetWorkspaceUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*models.WorkspaceUser, error)) *Store_GetWorkspaceUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkspaces provides a mock function with given fields: ctx
func (_m *Store) ListWorkspaces(ctx context.Context) ([]*models.Workspace, error) {
	ret := _m.Called(ctx)

	var r0 []*models.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Workspace, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Workspace); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_ListWorkspaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkspaces'
type Store_ListWorkspaces_Call struct {
	*mock.Call
}

// ListWorkspaces is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Store_Expecter) ListWorkspaces(ctx interface{}) *Store_ListWorkspaces_Call {
	return &Store_ListWorkspaces_Call{Call: _e.mock.On("ListWorkspaces", ctx)}
}

func (_c *Store_ListWorkspaces_Call) Run(run func(ctx context.Context)) *Store_ListWorkspaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Store_ListWorkspaces_Call) Return(_a0 []*models.Workspace, _a1 error) *Store_ListWorkspaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_ListWorkspaces_Call) RunAndReturn(run func(context.Context) ([]*models.Workspace, error)) *Store_ListWorkspaces_Call {
	_c.Call.Return(run)
	return _c
}

// RollbackTx provides a mock function with given fields: ctx, tx
func (_m *Store) RollbackTx(ctx context.Context, tx pgx.Tx) error {
	ret := _m.Called(ctx, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_RollbackTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RollbackTx'
type Store_RollbackTx_Call struct {
	*mock.Call
}

// RollbackTx is a helper method to define mock.On call
//   - ctx context.Context
//   - tx pgx.Tx
func (_e *Store_Expecter) RollbackTx(ctx interface{}, tx interface{}) *Store_RollbackTx_Call {
	return &Store_RollbackTx_Call{Call: _e.mock.On("RollbackTx", ctx, tx)}
}

func (_c *Store_RollbackTx_Call) Run(run func(ctx context.Context, tx pgx.Tx)) *Store_RollbackTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.Tx))
	})
	return _c
}

func (_c *Store_RollbackTx_Call) Return(_a0 error) *Store_RollbackTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_RollbackTx_Call) RunAndReturn(run func(context.Context, pgx.Tx) error) *Store_RollbackTx_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkspace provides a mock function with given fields: ctx, tx, workspaceID, userID, name
func (_m *Store) UpdateWorkspace(ctx context.Context, tx pgx.Tx, workspaceID uuid.UUID, userID uuid.UUID, name string) (*models.Workspace, error) {
	ret := _m.Called(ctx, tx, workspaceID, userID, name)

	var r0 *models.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, uuid.UUID, uuid.UUID, string) (*models.Workspace, error)); ok {
		return rf(ctx, tx, workspaceID, userID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, uuid.UUID, uuid.UUID, string) *models.Workspace); ok {
		r0 = rf(ctx, tx, workspaceID, userID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgx.Tx, uuid.UUID, uuid.UUID, string) error); ok {
		r1 = rf(ctx, tx, workspaceID, userID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_UpdateWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkspace'
type Store_UpdateWorkspace_Call struct {
	*mock.Call
}

// UpdateWorkspace is a helper method to define mock.On call
//   - ctx context.Context
//   - tx pgx.Tx
//   - workspaceID uuid.UUID
//   - userID uuid.UUID
//   - name string
func (_e *Store_Expecter) UpdateWorkspace(ctx interface{}, tx interface{}, workspaceID interface{}, userID interface{}, name interface{}) *Store_UpdateWorkspace_Call {
	return &Store_UpdateWorkspace_Call{Call: _e.mock.On("UpdateWorkspace", ctx, tx, workspaceID, userID, name)}
}

func (_c *Store_UpdateWorkspace_Call) Run(run func(ctx context.Context, tx pgx.Tx, workspaceID uuid.UUID, userID uuid.UUID, name string)) *Store_UpdateWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.Tx), args[2].(uuid.UUID), args[3].(uuid.UUID), args[4].(string))
	})
	return _c
}

func (_c *Store_UpdateWorkspace_Call) Return(_a0 *models.Workspace, _a1 error) *Store_UpdateWorkspace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_UpdateWorkspace_Call) RunAndReturn(run func(context.Context, pgx.Tx, uuid.UUID, uuid.UUID, string) (*models.Workspace, error)) *Store_UpdateWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStore(t mockConstructorTestingTNewStore) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
